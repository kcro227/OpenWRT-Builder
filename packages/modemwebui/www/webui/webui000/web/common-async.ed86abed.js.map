{"version":3,"sources":["src/utils/atQueue.ts","src/utils/formatUtils.ts","src/services/websocket.ts","src/hooks/useScrollReset.ts"],"sourcesContent":["import wsService from '@/services/websocket';\n\nlet currentATListener: ((msg: string) => void) | null = null;\nconst atQueue: (() => Promise<any>)[] = [];\nlet atBusy = false;\n\n// 全局 group 状态管理\nlet currentGroup: string | null = null;\nlet groupReadyPromise: Promise<string> | null = null;\nlet groupReadyResolve: ((group: string) => void) | null = null;\nlet lastGroupKey: string | null = null;\n\nfunction genMsgId() {\n  return Date.now().toString() + Math.random().toString(16).slice(2);\n}\n\nexport function sendATQueued(cmd: string, expectOKOnly = false): Promise<string> {\n  if (!cmd) return Promise.resolve('');\n  const msgId = genMsgId();\n  return new Promise((resolve, reject) => {\n    atQueue.push(() => sendATTransaction(cmd, msgId, expectOKOnly).then(resolve, reject));\n    processATQueue();\n  });\n}\nfunction processATQueue() {\n  if (atBusy || atQueue.length === 0) return;\n  atBusy = true;\n  const task = atQueue.shift();\n  task!().finally(() => {\n    atBusy = false;\n    processATQueue();\n  });\n}\nfunction sendATTransaction(cmd: string, msgId: string, expectOKOnly = false): Promise<string> {\n  return new Promise((resolve, reject) => {\n    let timeout: any;\n    if (currentATListener) {\n      // 兼容老逻辑，移除旧的 listener\n      wsService.removeListener(currentATListener);\n      currentATListener = null;\n    }\n    let buffer = '';\n    const handle = (msg: string) => {\n      try {\n        const obj = JSON.parse(msg);\n        if (obj.id !== msgId) return; // 只处理自己id的响应\n        buffer += (buffer ? '\\n' : '') + (obj.result || '');\n        if (/OK/.test(buffer) || \n          /ERROR/.test(buffer) ||\n          /BUSY/.test(buffer)) {\n          clearTimeout(timeout);\n          wsService.removeATListener(msgId);\n          currentATListener = null;\n          resolve(buffer);\n        }\n      } catch {\n        // 非JSON格式，忽略\n      }\n    };\n    currentATListener = handle;\n    wsService.addATListener(msgId, handle);\n    // 新增：支持 AT 命令被中断时立即 reject\n    const interruptHandler = (msg: string) => {\n      clearTimeout(timeout);\n      wsService.removeATListener(msgId);\n      currentATListener = null;\n      reject(msg || 'AT命令被中断/页面切换');\n    };\n    // 兼容 wsService.clearAllATListeners 主动回调\n    wsService.addATListener(msgId, (msg: string) => {\n      try { handle(msg); } catch (e) {}\n      if (msg && /中断|取消/.test(msg)) interruptHandler(msg);\n    });\n    timeout = setTimeout(() => {\n      wsService.removeATListener(msgId);\n      currentATListener = null;\n      reject('AT命令超时');\n    }, 6000);\n    wsService.send(JSON.stringify({ id: msgId, cmd }));\n    // console.log('[AT] 已发送命令:', cmd, 'id:', msgId);\n  });\n}\n\n/**\n * 重置 groupReady 状态（如切换IP/port时调用）\n */\nexport function resetGroupReady() {\n  currentGroup = null;\n  groupReadyPromise = null;\n  groupReadyResolve = null;\n  lastGroupKey = null;\n}\n\nfunction getGroupStorageKey(ip: string, port: string) {\n  return `modem_cmd_group_${ip}_${port}`;\n}\n\n// 获取当前已识别的group，始终优先等groupReadyPromise，保证并发安全\nexport async function getCurrentGroupAsync(ip?: string, port?: string): Promise<string> {\n  if (groupReadyPromise) {\n    const group = await groupReadyPromise;\n    return group ?? 'Quectel_AT';\n  }\n  if (currentGroup) return currentGroup;\n  // cold start兜底\n  if (ip && port) {\n    const key = getGroupStorageKey(ip, port);\n    const stored = localStorage.getItem(key);\n    if (stored) return stored;\n  }\n  return 'Quectel_AT';\n}\n\n// 串行化group识别流程，保证同一ip/port下只会有一个groupReadyPromise\nexport async function ensureGroupReady(ip: string, port: string): Promise<string> {\n  const groupKey = ip + ':' + port;\n  if (currentGroup && lastGroupKey === groupKey) {\n    return currentGroup;\n  }\n  if (!groupReadyPromise || lastGroupKey !== groupKey) {\n    groupReadyPromise = new Promise(resolve => {\n      groupReadyResolve = resolve;\n    });\n    lastGroupKey = groupKey;\n    // 连接好后自动发ATI\n    if (!wsService.getStatus || wsService.getStatus() !== 'open') {\n      await new Promise<void>(resolve => wsService.addOnOpenCallback(resolve));\n    }\n    const atiRaw = await sendATQueued('ATI', true);\n    const { parseATISystemInfo, setRememberedCommandGroup } = await import('@/utils/atModule');\n    const { detectedGroup } = parseATISystemInfo(atiRaw);\n    currentGroup = detectedGroup || 'Quectel_AT';\n    setRememberedCommandGroup(ip, port, currentGroup);\n    localStorage.setItem(getGroupStorageKey(ip, port), currentGroup);\n    groupReadyResolve && groupReadyResolve(currentGroup);\n  }\n  const group = await groupReadyPromise;\n  return group ?? 'Quectel_AT';\n}\n\n/**\n * 全局安全AT命令发送器，确保WebSocket连接和group识别后再发送AT命令。\n * @param cmd AT命令字符串\n * @param options { expectOKOnly, ip, port }\n * @returns Promise<string>\n */\nexport async function safeSendAT(cmd: string, options?: {\n  expectOKOnly?: boolean;\n  ip?: string;\n  port?: string;\n}): Promise<string> {\n  // 1. 等待WebSocket连接和group识别\n  let group = 'Quectel_AT';\n  if (options?.ip && options?.port) {\n    group = await ensureGroupReady(options.ip, options.port);\n  } else {\n    // 没有ip/port时只保证WebSocket连接\n    if (!wsService.getStatus || wsService.getStatus() !== 'open') {\n      await new Promise<void>(resolve => wsService.addOnOpenCallback(resolve));\n    }\n  }\n  // 2. 发送AT命令\n  return sendATQueued(cmd, options?.expectOKOnly);\n} ","/**\r\n * 格式化工具函数\r\n */\r\n\r\nimport dayjs from \"dayjs\";\r\n\r\n/**\r\n * 格式化速率（支持 bps 和 B/s 两种模式）\r\n * @param val 数值\r\n * @param isBytes 是否为字节速率（B/s），否则为比特速率（bps）\r\n */\r\nexport const formatSpeed = (\r\n    val: number | undefined | null,\r\n    isBytes: boolean = false\r\n): string => {\r\n    if (val == null || isNaN(val)) return '-';\r\n    if (isBytes) {\r\n        if (val >= 1024 * 1024 * 1024) {\r\n            const num = (val / 1024 / 1024 / 1024).toFixed(2);\r\n            return `${num} GB/s`;\r\n        } else if (val >= 1024 * 1024) {\r\n            const num = (val / 1024 / 1024).toFixed(2);\r\n            return `${num} MB/s`;\r\n        } else if (val >= 1024) {\r\n            const num = (val / 1024).toFixed(2);\r\n            return `${num} KB/s`;\r\n        } else {\r\n            return `${val} B/s`;\r\n        }\r\n    } else {\r\n        if (val >= 1000 * 1000 * 1000) {\r\n            const num = (val / 1000 / 1000 / 1000).toFixed(2);\r\n            return `${num} Gbps`;\r\n        } else if (val >= 1000 * 1000) {\r\n            const num = (val / 1000 / 1000).toFixed(2);\r\n            return `${num} Mbps`;\r\n        } else if (val >= 1000) {\r\n            const num = (val / 1000).toFixed(2);\r\n            return `${num} Kbps`;\r\n        } else {\r\n            return `${val} bps`;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * 格式化流量值\r\n * @param bytes 字节数\r\n * @param short 是否使用短格式\r\n * @returns 格式化后的字符串\r\n */\r\nexport const formatBytes = (bytes: number | undefined | null, short: boolean = false): string => {\r\n    if (bytes == null || isNaN(bytes)) return '-';\r\n\r\n    if (bytes >= 1024 * 1024 * 1024) {\r\n        const num = (bytes / 1024 / 1024 / 1024).toFixed(2);\r\n        return short ? `${num}G` : `${num} GB`;\r\n    } else if (bytes >= 1024 * 1024) {\r\n        const num = (bytes / 1024 / 1024).toFixed(2);\r\n        return short ? `${num}M` : `${num} MB`;\r\n    } else if (bytes >= 1024) {\r\n        const num = (bytes / 1024).toFixed(2);\r\n        return short ? `${num}K` : `${num} KB`;\r\n    } else {\r\n        return short ? `${bytes}` : `${bytes} B`;\r\n    }\r\n};\r\n\r\n// 通用解析函数\r\nfunction parseTime(raw: string) {\r\n    // 支持 2025/07/26 20:58:02+32\r\n    let m = raw.match(/(\\d{2,4})\\/(\\d{2})\\/(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})/);\r\n    if (m) {\r\n        return {\r\n            year: m[1].length === 2 ? 2000 + Number(m[1]) : Number(m[1]),\r\n            month: Number(m[2]) - 1,\r\n            day: Number(m[3]),\r\n            hour: Number(m[4]),\r\n            min: Number(m[5]),\r\n            sec: Number(m[6])\r\n        };\r\n    }\r\n    // 支持 2025/07/26,20:58:02+32\r\n    m = raw.match(/(\\d{2,4})\\/(\\d{2})\\/(\\d{2}),(\\d{2}):(\\d{2}):(\\d{2})/);\r\n    if (m) {\r\n        return {\r\n            year: m[1].length === 2 ? 2000 + Number(m[1]) : Number(m[1]),\r\n            month: Number(m[2]) - 1,\r\n            day: Number(m[3]),\r\n            hour: Number(m[4]),\r\n            min: Number(m[5]),\r\n            sec: Number(m[6])\r\n        };\r\n    }\r\n    // 支持 2025年07月26日 20:58:02\r\n    m = raw.match(/(\\d{4})年(\\d{2})月(\\d{2})日 (\\d{2}):(\\d{2}):(\\d{2})/);\r\n    if (m) {\r\n        return {\r\n            year: Number(m[1]),\r\n            month: Number(m[2]) - 1,\r\n            day: Number(m[3]),\r\n            hour: Number(m[4]),\r\n            min: Number(m[5]),\r\n            sec: Number(m[6])\r\n        };\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function formatTime(raw: string) {\r\n    const t = parseTime(raw);\r\n    if (t) return new Date(t.year, t.month, t.day, t.hour, t.min, t.sec);\r\n    // 兜底\r\n    const d = dayjs(raw.replace(/\\//g, '-').replace(',', ' '));\r\n    if (d.isValid()) return d.toDate();\r\n    return null;\r\n}\r\n\r\nexport function formatTimeStr(raw: string) {\r\n    const t = parseTime(raw);\r\n    if (t) return `${t.year}年${String(t.month + 1).padStart(2, '0')}月${String(t.day).padStart(2, '0')}日 ${String(t.hour).padStart(2, '0')}:${String(t.min).padStart(2, '0')}:${String(t.sec).padStart(2, '0')}`;\r\n    // 兜底\r\n    const d = dayjs(raw.replace(/\\//g, '-').replace(',', ' '));\r\n    if (d.isValid()) return d.format('YYYY年MM月DD日 HH:mm:ss');\r\n    return raw;\r\n}\r\n\r\nexport function getSignalColor(val: number | undefined, type: 'rsrp' | 'rsrq' | 'sinr') {\r\n    if (val === undefined) return 'var(--ant-color-text-secondary)';\r\n    // -157 ~ -32\r\n    if (type === 'rsrp') {\r\n        if (val >= -80) return 'var(--ant-color-success)'; // 亮绿\r\n        if (val >= -95) return 'var(--ant-color-warning)'; // 亮橙\r\n        if (val >= -110) return 'var(--ant-color-error)'; // 亮红\r\n        return 'var(--ant-color-error)'; // 深红\r\n    }\r\n    // -24 ~ 40\r\n    if (type === 'sinr') {\r\n        if (val >= 10) return 'var(--ant-color-success)';\r\n        if (val >= 5) return 'var(--ant-color-warning)';\r\n        if (val >= 0) return 'var(--ant-color-error)';\r\n        return 'var(--ant-color-error)';\r\n    }\r\n    // -44 ~ 20\r\n    if (type === 'rsrq') {\r\n        if (val >= -10) return 'var(--ant-color-success)';\r\n        if (val >= -15) return 'var(--ant-color-warning)';\r\n        if (val >= -20) return 'var(--ant-color-error)';\r\n        return 'var(--ant-color-error)';\r\n    }\r\n    return 'var(--ant-color-text-secondary)';\r\n}\r\n\r\nexport function getSignalLevel(val: number | undefined, type: 'rsrp' | 'sinr') {\r\n    if (val === undefined) return 0;\r\n    if (type === 'rsrp') {\r\n        if (val >= -80) return 4;\r\n        if (val >= -95) return 3;\r\n        if (val >= -110) return 2;\r\n        if (val >= -120) return 1;\r\n        return 0;\r\n    }\r\n    if (type === 'sinr') {\r\n        if (val >= 20) return 4;\r\n        if (val >= 13) return 3;\r\n        if (val >= 0) return 2;\r\n        if (val >= -10) return 1;\r\n        return 0;\r\n    }\r\n    return 0;\r\n}\r\n\r\n// --- 4G/5G 频点-频段表及查找 ---\r\nexport const LTE_BANDS = [\r\n    { band: 1, earfcnStart: 0, earfcnEnd: 599 },\r\n    { band: 3, earfcnStart: 1200, earfcnEnd: 1949 },\r\n    { band: 5, earfcnStart: 2400, earfcnEnd: 2649 },\r\n    { band: 8, earfcnStart: 3450, earfcnEnd: 3799 },\r\n    { band: 34, earfcnStart: 36200, earfcnEnd: 36349 },\r\n    { band: 38, earfcnStart: 37750, earfcnEnd: 38249 },\r\n    { band: 39, earfcnStart: 38250, earfcnEnd: 38649 },\r\n    { band: 40, earfcnStart: 38650, earfcnEnd: 39649 },\r\n    { band: 41, earfcnStart: 39650, earfcnEnd: 41589 },\r\n];\r\nexport const NR_BANDS = [\r\n    { band: 1, arfcnStart: 384000, arfcnEnd: 396000 },\r\n    { band: 3, arfcnStart: 342000, arfcnEnd: 357000 },\r\n    { band: 5, arfcnStart: 165300, arfcnEnd: 169300 },\r\n    { band: 8, arfcnStart: 342000, arfcnEnd: 357000 },\r\n    { band: 28, arfcnStart: 140600, arfcnEnd: 149600 },\r\n    { band: 41, arfcnStart: 499200, arfcnEnd: 537999 },\r\n    { band: 78, arfcnStart: 620000, arfcnEnd: 653333 },\r\n    { band: 79, arfcnStart: 693334, arfcnEnd: 733333 },\r\n    { band: 257, arfcnStart: 2054166, arfcnEnd: 2170833 },\r\n    { band: 258, arfcnStart: 2016667, arfcnEnd: 2079166 },\r\n];\r\nexport function getLteBandByEarfcn(earfcn: number) {\r\n    return LTE_BANDS.find(b => earfcn >= b.earfcnStart && earfcn <= b.earfcnEnd)?.band;\r\n}\r\nexport function getNrBandByArfcn(arfcn: number) {\r\n    return NR_BANDS.find(b => arfcn >= b.arfcnStart && arfcn <= b.arfcnEnd)?.band;\r\n}\r\n\r\n// 频点判断4G/5G\r\nexport function parseLockCellBand(value: number): { lteOrNr: 'lte' | 'nr', band: number | undefined } {\r\n    if (getLteBandByEarfcn(value)) {\r\n        return { lteOrNr: 'lte', band: getLteBandByEarfcn(value) };\r\n    }\r\n    if (getNrBandByArfcn(value)) {\r\n        return { lteOrNr: 'nr', band: getNrBandByArfcn(value) };\r\n    }\r\n    return { lteOrNr: 'lte', band: undefined };\r\n}\r\n\r\n// 运营商英文转中文\r\nexport function getOperatorName(code: string): string {\r\n    const codeUpper = code.toUpperCase();\r\n    if (\r\n        codeUpper.includes('CHN-CM') ||\r\n        codeUpper.includes('MOBILE') ||\r\n        codeUpper.includes('CMCC') ||\r\n        codeUpper.includes('4E2D56FD79FB52A8') ||\r\n        codeUpper.includes('CM')\r\n    ) return '中国移动';\r\n    if (\r\n        codeUpper.includes('CHN-CU') ||\r\n        codeUpper.includes('UNICOM') ||\r\n        codeUpper.includes('CUCC') ||\r\n        codeUpper.includes('4E2D56FD8054901A') ||\r\n        codeUpper.includes('CU')\r\n    ) return '中国联通';\r\n    if (\r\n        codeUpper.includes('CHN-CT') ||\r\n        codeUpper.includes('TELECOM') ||\r\n        codeUpper.includes('CTCC') ||\r\n        codeUpper.includes('4E2D56FD75354FE1') ||\r\n        codeUpper.includes('CT')\r\n    ) return '中国电信';\r\n    if (\r\n        codeUpper.includes('CHN-CBN') ||\r\n        codeUpper.includes('BROADCAST') ||\r\n        codeUpper.includes('CBN') ||\r\n        codeUpper.includes('N-V') ||\r\n        codeUpper.includes('CBN')\r\n    ) return '中国广电';\r\n    return code;\r\n}\r\n\r\nexport function convertKbpsToMbps(kbps: number): number {\r\n    if (!kbps || isNaN(kbps)) return 0;\r\n    if (kbps % 1024 === 0) return kbps / 1024;\r\n    if (kbps % 1000 === 0) return kbps / 1000;\r\n    return Math.floor(kbps / 1024);\r\n}\r\n\r\nexport function decodePdu(pdu: string): string {\r\n    // 简单支持UCS2（常见中文短信）\r\n    if (/^[0-9A-F]+$/i.test(pdu) && pdu.length % 4 === 0) {\r\n        try {\r\n            return pdu.match(/.{4}/g)!.map(hex => String.fromCharCode(parseInt(hex, 16))).join('');\r\n        } catch { return pdu; }\r\n    }\r\n    // 其他编码可扩展\r\n    return pdu;\r\n}\r\n\r\n// 工具：半字节反转\r\nexport function swapSemiOctet(str: string) {\r\n    let res = '';\r\n    for (let i = 0; i < str.length; i += 2) {\r\n        res += (str[i + 1] || '') + str[i];\r\n    }\r\n    return res.replace(/F$/i, '');\r\n}\r\n\r\n// 工具：BCD时间戳转字符串\r\nexport function decodeTimestamp(ts: string) {\r\n    const year = '20' + swapSemiOctet(ts.slice(0, 2));\r\n    const month = swapSemiOctet(ts.slice(2, 4));\r\n    const day = swapSemiOctet(ts.slice(4, 6));\r\n    const hour = swapSemiOctet(ts.slice(6, 8));\r\n    const min = swapSemiOctet(ts.slice(8, 10));\r\n    const sec = swapSemiOctet(ts.slice(10, 12));\r\n    return `${year}-${month}-${day} ${hour}:${min}:${sec}`;\r\n}\r\n\r\n// 工具：7bit解码\r\nexport function decode7bit(data: string, len: number) {\r\n    const bytes = [];\r\n    for (let i = 0; i < data.length; i += 2) {\r\n        bytes.push(parseInt(data.substr(i, 2), 16));\r\n    }\r\n    let out = '';\r\n    for (let i = 0; i < len; i++) {\r\n        const bitOffset = (i * 7) % 8;\r\n        const byteOffset = Math.floor((i * 7) / 8);\r\n        let val = (bytes[byteOffset] >> bitOffset) & 0x7F;\r\n        if (bitOffset > 1 && byteOffset + 1 < bytes.length) {\r\n            val |= (bytes[byteOffset + 1] << (8 - bitOffset)) & 0x7F;\r\n        }\r\n        out += String.fromCharCode(val);\r\n    }\r\n    return out;\r\n}\r\n\r\n// 工具：UCS2解码\r\nexport function decodeUcs2(data: string) {\r\n    let out = '';\r\n    for (let i = 0; i < data.length; i += 4) {\r\n        out += String.fromCharCode(parseInt(data.substr(i, 4), 16));\r\n    }\r\n    return out;\r\n}\r\n\r\n// 主PDU解码函数，返回 { phone, time, content }\r\nexport function decodeSmsDeliverPdu(pdu: string) {\r\n    // 1. 取SMSC长度\r\n    const smscLen = parseInt(pdu.slice(0, 2), 16);\r\n    const smscEnd = (1 + smscLen) * 2;\r\n    // 2. 取PDU类型\r\n    let idx = smscEnd;\r\n    const pduType = pdu.slice(idx, idx + 2);\r\n    idx += 2;\r\n    // 3. 取OA（发信号码）\r\n    const oaLen = parseInt(pdu.slice(idx, idx + 2), 16);\r\n    idx += 2;\r\n    const oaType = pdu.slice(idx, idx + 2);\r\n    idx += 2;\r\n    const oaLenOctet = Math.ceil(oaLen / 2) * 2;\r\n    const oaRaw = pdu.slice(idx, idx + oaLenOctet);\r\n    const phone = swapSemiOctet(oaRaw).replace(/^86/, '').replace(/^0+/, '');\r\n    idx += oaLenOctet;\r\n    // 4. PID\r\n    idx += 2;\r\n    // 5. DCS\r\n    const dcs = pdu.slice(idx, idx + 2);\r\n    idx += 2;\r\n    // 6. SCTS（时间戳）\r\n    const scts = pdu.slice(idx, idx + 14);\r\n    const time = decodeTimestamp(scts);\r\n    idx += 14;\r\n    // 7. UDL\r\n    const udl = parseInt(pdu.slice(idx, idx + 2), 16);\r\n    idx += 2;\r\n    // 8. UD\r\n    let ud = pdu.slice(idx);\r\n    let content = '';\r\n    let dcsType = dcs.toUpperCase();\r\n    // 检查是否有UDH\r\n    let hasUdh = false;\r\n    let udhLen = 0;\r\n    if (pduType.length === 2 && (parseInt(pduType, 16) & 0x40)) { // TP-UDHI=1\r\n        hasUdh = true;\r\n        udhLen = parseInt(ud.slice(0, 2), 16) * 2; // UDH长度（字节数*2=HEX长度）\r\n        ud = ud.slice(2 + udhLen); // 跳过UDH头\r\n    }\r\n    if (dcsType === '08') {\r\n        // UCS2\r\n        content = decodeUcs2(ud.slice(0, udl * 2 - (hasUdh ? (udhLen + 2) : 0)));\r\n    } else if (dcsType === '00') {\r\n        // 7bit\r\n        content = decode7bit(ud, udl - (hasUdh ? (udhLen + 2) / 2 : 0));\r\n    } else {\r\n        content = ud;\r\n    }\r\n    return { phone, time, content };\r\n}\r\n\r\n// 合并分片短信（长短信）为一条\r\n// smsList: { pdu, phone, time, content, ... }[]\r\n// 返回合并后的短信数组\r\nexport function mergeConcatSmsList(smsList: any[]) {\r\n    // 提取分片信息\r\n    function parseConcatInfoFromPdu(pdu: string) {\r\n        const smscLen = parseInt(pdu.slice(0, 2), 16);\r\n        const smscEnd = (1 + smscLen) * 2;\r\n        let idx = smscEnd;\r\n        const pduType = pdu.slice(idx, idx + 2);\r\n        idx += 2;\r\n        const oaLen = parseInt(pdu.slice(idx, idx + 2), 16);\r\n        idx += 2;\r\n        idx += 2; // oaType\r\n        const oaLenOctet = Math.ceil(oaLen / 2) * 2;\r\n        idx += oaLenOctet;\r\n        idx += 2; // PID\r\n        idx += 2; // DCS\r\n        idx += 14; // SCTS\r\n        idx += 2; // UDL\r\n        const ud = pdu.slice(idx);\r\n        if (pduType.length === 2 && (parseInt(pduType, 16) & 0x40)) {\r\n            // 有UDH\r\n            const udhLen = parseInt(ud.slice(0, 2), 16) * 2;\r\n            const udh = ud.slice(2, 2 + udhLen);\r\n            // UDH格式: 0003XXYYZZ\r\n            const m = udh.match(/0003([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})/);\r\n            if (m) {\r\n                return {\r\n                    ref: m[1],\r\n                    total: parseInt(m[2], 16),\r\n                    seq: parseInt(m[3], 16),\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    // 标记分片信息\r\n    const parsedList = smsList.map(item => {\r\n        const concat = parseConcatInfoFromPdu(item.pdu || '');\r\n        return {\r\n            ...item,\r\n            _ref: concat ? concat.ref : undefined,\r\n            _seq: concat ? concat.seq : 1,\r\n            _total: concat ? concat.total : 1,\r\n        };\r\n    });\r\n    // 分组合并\r\n    const mergeMap: Record<string, any[]> = {};\r\n    parsedList.forEach(item => {\r\n        const key = item._ref\r\n            ? `${item.phone}_${item._ref}`\r\n            : `${item.phone}_${item.time}`;\r\n        if (!mergeMap[key]) mergeMap[key] = [];\r\n        mergeMap[key].push(item);\r\n    });\r\n    const merged: any[] = [];\r\n    Object.values(mergeMap).forEach(arr => {\r\n        arr.sort((a, b) => a._seq - b._seq);\r\n        let content = '';\r\n        const index = arr.map(x => x.index); // 直接用index数组\r\n        arr.forEach(x => {\r\n            content += x.content;\r\n        });\r\n        const base = arr[0];\r\n        merged.push({\r\n            ...base,\r\n            content,\r\n            index, // index字段为数组\r\n        });\r\n    });\r\n    return merged;\r\n}\r\n\r\n/**\r\n * 点分十进制IPv6转冒号十六进制格式\r\n * @param ipv6 点分十进制字符串\r\n * @returns 标准IPv6字符串\r\n */\r\nexport function ipv6DotToHex(ipv6: string): string {\r\n    if (!ipv6) return '';\r\n    const parts = ipv6.split('.').map(x => parseInt(x, 10));\r\n    if (parts.length === 16 && parts.every(x => !isNaN(x))) {\r\n        let hex = '';\r\n        for (let i = 0; i < 16; i += 2) {\r\n            hex += ((parts[i] << 8) | parts[i + 1]).toString(16).padStart(4, '0');\r\n            if (i < 14) hex += ':';\r\n        }\r\n        hex = hex.split(':').map(seg => seg.replace(/^0+/, '') || '0').join(':');\r\n        hex = hex.replace(/(:0)+:0(:|$)/, match => '::' + (match.endsWith(':') ? '' : ':'));\r\n        hex = hex.replace(/::+/, '::');\r\n        return hex;\r\n    }\r\n    return ipv6;\r\n}\r\n\r\n/**\r\n * 拆分返回值，找到特定开头的行，用逗号分割，数据添加到数组\r\n * @param response 原始返回值字符串\r\n * @param prefix 要匹配的开头字符串\r\n * @returns 解析后的数据数组，每行一个数组\r\n */\r\nexport function parseResponseByPrefix(response: string, prefix: string): string[][] {\r\n    if (!response || !prefix) return [];\r\n    \r\n    const lines = response.split('\\n').map(line => line.trim()).filter(line => line);\r\n    const result: string[][] = [];\r\n    \r\n    for (const line of lines) {\r\n        if (line.startsWith(prefix)) {\r\n            // 去掉匹配的开头字符串\r\n            const dataPart = line.substring(prefix.length).trim();\r\n            if (dataPart) {\r\n                // 用逗号分割数据，并去掉引号\r\n                const dataArray = dataPart.split(',').map(item => {\r\n                    const trimmed = item.trim();\r\n                    // 去掉首尾的引号（单引号或双引号）\r\n                    return trimmed.replace(/^[\"']|[\"']$/g, '');\r\n                }).filter(item => item);\r\n                result.push(dataArray);\r\n            }\r\n        }\r\n    }\r\n    \r\n    return result;\r\n}\r\n","// 优化后的 WebSocket 单例服务，支持断线重连、并发复用、连接状态管理\nclass WebSocketService {\n  private static instance: WebSocketService;\n  private ws: WebSocket | null = null;\n  private listeners: ((msg: string) => void)[] = [];\n  private atListeners: Map<string, (msg: string) => void> = new Map();\n  private url: string = '';\n  private reconnectTimer: any = null;\n  private isManuallyClosed = false;\n  private status: 'idle' | 'connecting' | 'open' | 'closed' = 'idle';\n  private onOpenCallbacks: (() => void)[] = [];\n  private connectId: number = 0; // 新增：连接ID\n\n  private constructor() {}\n\n  public static getInstance() {\n    if (!WebSocketService.instance) {\n      WebSocketService.instance = new WebSocketService();\n    }\n    return WebSocketService.instance;\n  }\n\n  public connect(url: string) {\n    console.log('[WebSocket] 尝试连接:', url);\n    if (this.ws && (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING)) {\n      console.log('[WebSocket] 已连接或正在连接，跳过');\n      return;\n    }\n    this.url = url;\n    this.isManuallyClosed = false;\n    this.createWebSocket();\n  }\n\n  private createWebSocket() {\n    this.connectId += 1; // 每次新建连接自增\n    this.status = 'connecting';\n    console.log('[WebSocket] 创建WebSocket:', this.url);\n    this.ws = new WebSocket(this.url);\n    this.ws.onopen = () => {\n      this.status = 'open';\n      console.log('[WebSocket] 已打开:', this.url);\n      if (this.reconnectTimer) clearTimeout(this.reconnectTimer);\n      // 执行所有onOpen回调\n      this.onOpenCallbacks.forEach(cb => {\n        try { cb(); } catch (e) { console.error('[WebSocket] onOpen回调异常', e); }\n      });\n      this.onOpenCallbacks = [];\n    };\n    this.ws.onclose = (e) => {\n      this.status = 'closed';\n      console.log('[WebSocket] 已关闭:', e);\n      this.ws = null;\n      // 断开时清理所有 AT 命令监听，防止死等\n      this.clearAllATListeners('WebSocket断开，命令取消');\n      if (!this.isManuallyClosed) {\n        console.log('[WebSocket] 断线重连3秒后...');\n        this.reconnectTimer = setTimeout(() => this.createWebSocket(), 3000);\n      }\n    };\n    this.ws.onerror = (e) => {\n      console.log('[WebSocket] 发生错误:', e);\n      this.ws?.close();\n    };\n    this.ws.onmessage = (event) => {\n      // 优先分发给 atListeners（按 id 匹配）\n      try {\n        const obj = JSON.parse(event.data);\n        if (obj && obj.id && this.atListeners.has(obj.id)) {\n          this.atListeners.get(obj.id)?.(event.data);\n          return;\n        }\n      } catch {\n        // 非 JSON 格式，忽略\n      }\n      // 兼容原有 listeners\n      this.listeners.forEach((cb) => cb(event.data));\n    };\n  }\n\n  public send(msg: string | object) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      if (typeof msg === 'object') {\n        this.ws.send(JSON.stringify(msg));\n      } else {\n        this.ws.send(msg);\n      }\n    }\n  }\n\n  public addListener(cb: (msg: string) => void) {\n    this.listeners.push(cb);\n  }\n\n  public removeListener(cb: (msg: string) => void) {\n    this.listeners = this.listeners.filter((fn) => fn !== cb);\n  }\n\n  public addATListener(id: string, cb: (msg: string) => void) {\n    this.atListeners.set(id, cb);\n  }\n  \n  public removeATListener(id: string) {\n    this.atListeners.delete(id);\n  }\n\n  // 新增：清理所有 AT 命令监听\n  public clearAllATListeners(msg?: string) {\n    this.atListeners.forEach((cb, id) => {\n      try { cb(msg || 'AT命令被中断/页面切换'); } catch (e) {}\n    });\n    this.atListeners.clear();\n  }\n\n  public close() {\n    this.isManuallyClosed = true;\n    if (this.reconnectTimer) clearTimeout(this.reconnectTimer);\n    this.ws?.close();\n    this.ws = null;\n    this.status = 'closed';\n  }\n\n  public getStatus() {\n    return this.status;\n  }\n\n  public addOnOpenCallback(cb: () => void) {\n    this.onOpenCallbacks.push(cb);\n  }\n\n  // 新增：移除 onOpen 回调\n  public removeOnOpenCallback(cb: () => void) {\n    this.onOpenCallbacks = this.onOpenCallbacks.filter(fn => fn !== cb);\n  }\n\n  public getConnectId() {\n    return this.connectId;\n  }\n}\n\nexport default WebSocketService.getInstance();","import { useEffect } from 'react';\r\nimport { history } from '@umijs/max';\r\n\r\n/**\r\n * 页面切换时自动重置滚动位置的Hook\r\n * 解决SPA应用中页面间滚动位置共享的问题\r\n */\r\nexport const useScrollReset = () => {\r\n  useEffect(() => {\r\n    // 页面加载时滚动到顶部\r\n    window.scrollTo(0, 0);\r\n    \r\n    // 监听路由变化，在页面切换时重置滚动位置\r\n    const unlisten = history.listen((location) => {\r\n      // 使用setTimeout确保在DOM更新后执行滚动重置\r\n      setTimeout(() => {\r\n        window.scrollTo(0, 0);\r\n      }, 0);\r\n    });\r\n\r\n    // 清理监听器\r\n    return () => {\r\n      unlisten();\r\n    };\r\n  }, []);\r\n};\r\n\r\n"],"names":[],"mappings":"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"}